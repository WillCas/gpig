{
  "openapi": "3.0.0",
  "info": {
    "title": "GPIG Interface",
    "description": "This is the primary defintion for the GPIG interface that all teams should work from. This interface is designed from the perspective that the virus model is the server, and the WHO model is the client making requests. Extensions and modifications are allowed at the discretion of the clients.\n\nThere are a number of general minimum requirements for the server that are assumed:\n\n- Requests can support a body of up to 10MB\n- Responses can support a body of up to 100MB\n\nEach 'full turn' is a complete virus -> WHO back-and-forth. This reflects a 'ply'.",
    "version": "1.0",
    "contact": {}
  },
  "servers": [],
  "tags": [],
  "paths": {
    "/info/totals": {
      "post": {
        "tags": [],
        "summary": "Get state totals within a location",
        "operationId": "post-info-totals",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Totals"
          },
          "404": {
            "$ref": "#/components/responses/FailedRequest"
          },
          "418": {
            "$ref": "#/components/responses/FailedRequest"
          },
          "500": {
            "$ref": "#/components/responses/FailedRequest"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "locations": [
                      [
                        "A1",
                        "B3"
                      ]
                    ]
                  }
                }
              }
            }
          }
        },
        "description": "Request for the total number of people in a grid location."
      },
      "parameters": []
    },
    "/info/actors": {
      "post": {
        "tags": [],
        "summary": "Get all Actor IDs in a location",
        "operationId": "post-info-actors",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActorSearchResult"
          },
          "404": {
            "$ref": "#/components/responses/FailedRequest"
          },
          "418": {
            "$ref": "#/components/responses/FailedRequest"
          },
          "500": {
            "$ref": "#/components/responses/FailedRequest"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "locations": [
                      [
                        "A0"
                      ]
                    ]
                  }
                }
              }
            }
          }
        },
        "description": "Request for the IDs of actors that are currently in a grid location (not including those in the dead state)."
      },
      "parameters": []
    },
    "/info/homes": {
      "post": {
        "tags": [],
        "summary": "Get actors who have home in location",
        "operationId": "post-info-homes",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ActorSearchResult"
          },
          "404": {
            "$ref": "#/components/responses/FailedRequest"
          },
          "418": {
            "$ref": "#/components/responses/FailedRequest"
          },
          "500": {
            "$ref": "#/components/responses/FailedRequest"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "locations": [
                      [
                        "B2"
                      ]
                    ]
                  }
                }
              }
            }
          }
        },
        "description": "Request for the IDs of actors who have homes in a grid location (including those in the dead state)."
      },
      "parameters": []
    },
    "/info/actor-data": {
      "parameters": [],
      "post": {
        "summary": "",
        "operationId": "post-info-actor-data",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Actors"
          },
          "400": {
            "$ref": "#/components/responses/FailedRequest"
          },
          "500": {
            "$ref": "#/components/responses/FailedRequest"
          }
        },
        "description": "Request the state of a set of actors.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActorIDArray"
              },
              "examples": {}
            }
          },
          "description": "The array of actor IDs to fetch the data of. If any IDs are not found, then they will be omitted from the response."
        }
      }
    },
    "/status": {
      "get": {
        "summary": "Get simulation status",
        "tags": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimulationStatus"
          },
          "500": {
            "$ref": "#/components/responses/FailedRequest"
          }
        },
        "operationId": "get-status",
        "description": "Request for the current simulation status."
      },
      "parameters": [],
      "post": {
        "summary": "Update status",
        "operationId": "post-status",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimulationStatus"
          },
          "400": {
            "$ref": "#/components/responses/FailedRequest"
          },
          "500": {
            "$ref": "#/components/responses/FailedRequest"
          }
        },
        "description": "The endpoint used to inform the server that the client has ended their turn.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulationStatusUpdate"
              },
              "examples": {
                "example": {
                  "value": {
                    "isWhoTurn": false
                  }
                }
              }
            }
          },
          "description": ""
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [],
        "summary": "Get simulation settings",
        "operationId": "get-settings",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimulationSettings"
          },
          "500": {
            "$ref": "#/components/responses/FailedRequest"
          }
        },
        "description": "Request the current game settings."
      },
      "parameters": []
    },
    "/actions": {
      "post": {
        "summary": "Adjust actions in batch",
        "operationId": "post-actions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Actions"
          },
          "400": {
            "$ref": "#/components/responses/FailedRequest"
          },
          "425": {
            "$ref": "#/components/responses/FailedRequest"
          },
          "500": {
            "$ref": "#/components/responses/FailedRequest"
          }
        },
        "description": "Allows the creation and deletion of actions in batch. This request will only fail when the entire request does, individual actions will each have their own response objects with dedicated status codes.\n\nThis means that if an action fails with the status code 400, then the HTTP request will respond with 200, however the action reponse object with the same index will contain a code of 400.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionBatch"
              }
            }
          },
          "description": "The action(s) you want to create or update. "
        }
      }
    },
    "/info/test-results": {
      "post": {
        "summary": "Get test results for a given location",
        "operationId": "post-info-test-results",
        "responses": {
          "200": {
            "$ref": "#/components/responses/TestResults"
          },
          "404": {
            "$ref": "#/components/responses/FailedRequest"
          },
          "500": {
            "$ref": "#/components/responses/FailedRequest"
          }
        },
        "description": "Returns the test results, which are collected by the test-and-isolation action, for the given location.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "locations": [
                      [
                        "A1"
                      ]
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionBatch": {
        "title": "Action Batch",
        "description": "The actions you want to create or update.",
        "type": "array",
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/ActionCreate"
            },
            {
              "$ref": "#/components/schemas/ActionDelete"
            }
          ],
          "description": "Any number of create/delete actions are allowed."
        }
      },
      "ActionCreate": {
        "title": "Action Create",
        "type": "object",
        "description": "The request object for creating an action.\n\nThe `action` parameter has to match the corresonding `parameters` object, not doing so is an error.",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "format": "int32",
            "description": "The ID of the created action. This can then be used for deletion later."
          },
          "action": {
            "type": "string",
            "enum": [
              "testAndIsolation",
              "stayAtHome",
              "closeSchools",
              "closeRecreationalLocations",
              "shieldingProgram",
              "movementRestrictions",
              "closeBorders",
              "investInVaccine",
              "furlough",
              "infoPressRelease",
              "loan",
              "maskMandate",
              "socialDistancingMandate",
              "curfew",
              "healthDrive",
              "investInHealthServices",
              "administerVaccinesActors",
              "administerVaccinesLocation"
            ],
            "description": "The action kind. Each kind has a specific set of parameters that it allows."
          },
          "mode": {
            "type": "string",
            "enum": [
              "create"
            ],
            "description": "What change will be made to the action. For creation, this property always has to be 'create'."
          },
          "parameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TestAndIsolationParameters"
              },
              {
                "$ref": "#/components/schemas/StayAtHomeParameters"
              },
              {
                "$ref": "#/components/schemas/CloseSchoolsParameters"
              },
              {
                "$ref": "#/components/schemas/CloseRecreationalLocationsParameters"
              },
              {
                "$ref": "#/components/schemas/ShieldingProgramParameters"
              },
              {
                "$ref": "#/components/schemas/MovementRestrictionsParameters"
              },
              {
                "$ref": "#/components/schemas/CloseBordersParameters"
              },
              {
                "$ref": "#/components/schemas/InvestInVaccineParameters"
              },
              {
                "$ref": "#/components/schemas/FurloughParameters"
              },
              {
                "$ref": "#/components/schemas/InformationPressReleaseParameters"
              },
              {
                "$ref": "#/components/schemas/LoanParameters"
              },
              {
                "$ref": "#/components/schemas/MaskMandateParameters"
              },
              {
                "$ref": "#/components/schemas/HealthDriveParameters"
              },
              {
                "$ref": "#/components/schemas/InvestInHealthServicesParameters"
              },
              {
                "$ref": "#/components/schemas/SocialDistancingMandateParameters"
              },
              {
                "$ref": "#/components/schemas/CurfewParameters"
              },
              {
                "$ref": "#/components/schemas/AdministerVaccinesActors"
              },
              {
                "$ref": "#/components/schemas/AdministerVaccinesLocation"
              }
            ],
            "description": "The parameters of the action. This object has to match with the corresponding action kind."
          }
        },
        "required": [
          "id",
          "action",
          "mode",
          "parameters"
        ]
      },
      "ActionDelete": {
        "title": "Action Delete",
        "type": "object",
        "description": "The request object for deleting an action.",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The ID of the action to delete."
          },
          "mode": {
            "type": "string",
            "description": "What change will be made to the action. For deletion, this property always has to be 'delete'.",
            "enum": [
              "delete"
            ]
          }
        },
        "required": [
          "id",
          "mode"
        ]
      },
      "ActionResult": {
        "title": "Action Result",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The ID of the action that was adjusted. This will match the ID that was sent."
          },
          "code": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The response code for the action adjustment. This uses standard HTTP response codes. (e.g. 200 for success, 404 for an invalid location, etc.)"
          },
          "message": {
            "type": "string",
            "description": "A message containing information about the request reponse. Typically used for debug information in the case of non 2xx status codes."
          }
        },
        "required": [
          "id",
          "code"
        ],
        "description": "The result object of an action.\n\nIf an action was sent with a coordinate that does not exist, then this response will have the code 404, and the action will not be applied.\n\nIf an action failed to apply (i.e. that action has not been applied to the server), then the reponse will have the code 500. If an action has been _partially_ applied, then these changes must be undone by the server before the response is sent."
      },
      "Actor": {
        "title": "Actor",
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "uninfected",
              "asymptomaticInfectedNotInfectious",
              "asymptomaticInfectedInfectious",
              "symptomatic",
              "seriousInfection",
              "dead",
              "recoveredImmune"
            ],
            "description": "The current infection state of the actor."
          },
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "home": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The age of the actor in years."
          },
          "vulnerable": {
            "type": "boolean",
            "description": "A flag for whether the actor is considered clinically vulnerable."
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The ID of the actor. This is unique for each actor."
          }
        },
        "required": [
          "state",
          "location",
          "home",
          "age",
          "vulnerable",
          "id"
        ]
      },
      "ActorIDArray": {
        "title": "Actor ID Array",
        "type": "array",
        "items": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "description": "An array of actor IDs."
      },
      "ActorSearchResult": {
        "title": "Actor Search Result",
        "type": "object",
        "description": "The object containing the result from an actor search. Provides both the location the search was done against, and all of the IDs of the actors that match the search.",
        "properties": {
          "actors": {
            "$ref": "#/components/schemas/ActorIDArray"
          },
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "actors",
          "location"
        ]
      },
      "AdministerVaccinesActors": {
        "title": "Administer Vaccines Actors",
        "type": "object",
        "description": "The parameters for the `administerVaccinesActors` action.\n\nOffer vaccines (previously developed by Invest in Vaccine) to members of the population by specifying individuals.",
        "properties": {
          "vaccineId": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The ID of the vaccine to administer."
          },
          "actorIds": {
            "$ref": "#/components/schemas/ActorIDArray"
          }
        },
        "required": [
          "vaccineId",
          "actorIds"
        ]
      },
      "AdministerVaccinesLocation": {
        "title": "Administer Vaccines Location",
        "type": "object",
        "description": "The parameters for the `administerVaccinesLocation` action.\n\nOffer vaccines (previously developed by Invest in Vaccine) to members of the population by location and constraints.",
        "properties": {
          "vaccineId": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The ID of the vaccine to administer."
          },
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "minAge": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The minimum age to offer vaccines. If null or unset, then no minimum is set."
          },
          "maxAge": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The maximum age to offer vaccines. If null or unset, then no maximum is set."
          },
          "vulnerableOnly": {
            "type": "boolean",
            "description": "Whether to only offer vaccines to vulnerable people (if an age-range is given, then only the vulnerable in the range are targeted). If null or unset, then it defaults to false."
          }
        },
        "required": [
          "vaccineId",
          "location"
        ]
      },
      "CloseBordersParameters": {
        "title": "Close Borders Parameters",
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ],
        "description": "The parameters for the `closeBorders` action.\n\nAction: Stop all movement between one location and all others."
      },
      "CloseRecreationalLocationsParameters": {
        "title": "Close Recreational Locations Parameters",
        "type": "object",
        "description": "The parameters for the `closeRecreationalLocations` action.\n\nAction: Close all recreational facilities in the given location and prevent mixing of people and households in these locations.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ]
      },
      "CloseSchoolsParameters": {
        "title": "Close Schools Parameters",
        "type": "object",
        "description": "The parameters for the `closeSchools` action.\n\nAction: Close all schools in the given location and prevent school-age people from mixing at school.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ]
      },
      "CurfewParameters": {
        "title": "Curfew Parameters",
        "type": "object",
        "description": "The parameters for the `curfew` action.\n\nAction: Introduce a curfew to require the public to not go into public places past a certain time, reducing socialisation and use of recreational businesses.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ]
      },
      "EffectivenessQuality": {
        "title": "Effectiveness Quality",
        "type": "object",
        "properties": {
          "lowQuality": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 1,
            "description": "Effectiveness of the low-quality item."
          },
          "highQuality": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 1,
            "description": "Effectiveness of the high-quality item."
          }
        },
        "required": [
          "lowQuality",
          "highQuality"
        ],
        "description": "Provides the effectiveness of the low- and high-quality items of a given tool."
      },
      "FailedRequest": {
        "title": "Failed Request",
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "minimum": 400,
            "exclusiveMaximum": true,
            "maximum": 600,
            "description": "The status code of the request. Will always be 4xx or 5xx, as reponse is only used in these conditions."
          },
          "message": {
            "type": "string",
            "description": "A message containing extra information on what went wrong."
          }
        },
        "required": [
          "code"
        ],
        "description": "The object returned in the case that a request failed for any reason."
      },
      "FurloughParameters": {
        "title": "Furlough Parameters",
        "type": "object",
        "description": "The parameters to the `furlough` action.\n\nAction: Provide monetary support to those who are not able to work due to the contagion, propping up businesses that are not viable during the pandemic.\n\n- Reduces the number of people going to work\n- Higher amount results in higher budget cost\n- If used in combination with action 2 or 4, that action's GDP cost is reduced\n",
        "properties": {
          "amountInvested": {
            "type": "integer",
            "description": "Amount invested per working person."
          },
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "amountInvested",
          "location"
        ]
      },
      "HealthDriveParameters": {
        "title": "Health Drive Parameters",
        "type": "object",
        "description": "The parameters for the `healthDrive` action.\n\nAction: Attempt to improve the health of people via things like exercise and healthy eating to try and improve the base well-being of the population.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ]
      },
      "InfectionTotals": {
        "title": "Infection Totals",
        "type": "object",
        "description": "Provides the number of people in each infection state in a given location.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "uninfected": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Number of people who have never come into contact with the virus."
          },
          "asymptomaticInfectedNotInfectious": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Number of people who have contracted the virus, but are not showing symptoms, nor are capable of spreading it."
          },
          "asymptomaticInfectedInfectious": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Number of people who have contracted the virus, are not showing symptoms, but are able to spread it to others."
          },
          "symptomatic": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Number of people who have contracted the virus and are showing symptoms of it. They can also spread it to others."
          },
          "seriousInfection": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Number of people who have been hospitalised due to the virus."
          },
          "dead": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Number of people who have died due to the virus."
          },
          "recoveredImmune": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Number of people who have contracted the virus, but have fully recovered and are not able to spread it or re-contract it."
          }
        },
        "required": [
          "location",
          "uninfected",
          "asymptomaticInfectedNotInfectious",
          "asymptomaticInfectedInfectious",
          "symptomatic",
          "seriousInfection",
          "dead",
          "recoveredImmune"
        ]
      },
      "InformationPressReleaseParameters": {
        "title": "Information Press Release Parameters",
        "type": "object",
        "description": "The parameters to the `infoPressRelease` action.\n\nAction: Press-releases to improve morale/disseminate information, which could have a negative effect if it goes wrong and are produced every set unit of time.\n\n- Increase awareness\n- Probably increase public opinion\n- Implementation can change the amount this increases (minimum of 0 increase)\n- Implementation can alter how much the improvement is based on number of previous press releases",
        "properties": {
          "amountInvested": {
            "type": "integer",
            "description": "Amount invested in total."
          },
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "amountInvested",
          "location"
        ]
      },
      "InvestInHealthServicesParameters": {
        "title": "Invest In Health Services Parameters",
        "type": "object",
        "description": "The parameters for the `investInHealthServices` action.\n\nAction: Increase investment in health services. Improves health services response to contagion.",
        "properties": {
          "amountInvested": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Amount invested in total. Higher amount will result in deminising returns."
          }
        },
        "required": [
          "amountInvested"
        ]
      },
      "InvestInVaccineParameters": {
        "title": "Invest In Vaccine Parameters",
        "type": "object",
        "description": "The parameters to the `investInVaccine` action.\n\nAction: Work towards producing a vaccine for the contagion. A vaccine is produced once US$80 million has been invested in the production of a vaccine, at this point further investment will lead to subsequent vaccines being produced via the same process. The produced vaccine will be as described in section 8 of the GPIG Cross-Team Competition Rules.",
        "properties": {
          "amountInvested": {
            "type": "integer",
            "description": "Amount invested for this turn."
          }
        },
        "required": [
          "amountInvested"
        ]
      },
      "LoanParameters": {
        "title": "Loan Parameters",
        "type": "object",
        "description": "The parameters to the `loan` action.\n\nAction: Allow the WHO to take additional Budget for situations in which they run out of money. Negative effects of taking a loan are considered too long term or otherwise out of scope\n\n- Reduction in Score\n- Increase in Budget for the following turn (Lump sum)\n",
        "properties": {
          "amountLoaned": {
            "type": "integer",
            "description": "Total amount to be loaned to the WHO."
          }
        },
        "required": [
          "amountLoaned"
        ]
      },
      "LocationCoord": {
        "type": "string",
        "title": "Location Coordinate",
        "pattern": "^[A-Z][0-9]+$",
        "description": "A single coordinate for a location."
      },
      "LocationCoords": {
        "type": "array",
        "title": "Location Coordinates",
        "description": "The coordinate array targeting a given location.\n\nCoordinates are a reference to a specific grid and sub-grid in increasing in specificity. The grid is a conceptual overlay over the map to enable an abstract method of referencing sections of the map. Due to a lack of official documentation on how grid coordinates function, they are up for interpretation for specific usage in implementations.",
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/LocationCoord"
        }
      },
      "LocationDefinition": {
        "title": "Location Definition",
        "type": "object",
        "description": "A definition for a given location that is available.",
        "properties": {
          "coord": {
            "$ref": "#/components/schemas/LocationCoord"
          },
          "subLocations": {
            "type": "array",
            "description": "An array of sub-locations that are under this location. If not given, or empty, then there are no sub-locations.\n\nEach item in this array is another LocationDefinition object.",
            "items": {
              "$ref": "#/components/schemas/LocationDefinition"
            }
          }
        },
        "required": [
          "coord"
        ]
      },
      "MaskMandateParameters": {
        "title": "Mask Mandate Parameters",
        "type": "object",
        "description": "The parameters for the `maskMandate` action.\n\nAction: Require people to wear masks while in public to reduce the spread of the contagion.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "maskProvisionLevel": {
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2
            ],
            "description": "The level at which to provision masks for public use. 0 is no provisioning at all, 1 is low-quality mask provisioning, and 2 is high-quality mask provisioning."
          }
        },
        "required": [
          "location",
          "maskProvisionLevel"
        ]
      },
      "MovementRestrictionsParameters": {
        "title": "Movement Restrictions Parameters",
        "type": "object",
        "description": "The parameters for the `movementRestrictions` action.\n\nAction: Stop people from travelling a certain distance away from their household.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "distance": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The distance in terms of the lowest-level grid size."
          }
        },
        "required": [
          "location",
          "distance"
        ]
      },
      "SearchRequest": {
        "title": "Search Request",
        "type": "object",
        "description": "An object providing details for a search request.",
        "properties": {
          "locations": {
            "description": "The array of coordinates to search.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationCoords"
            }
          }
        },
        "required": [
          "locations"
        ]
      },
      "ShieldingProgramParameters": {
        "title": "Shielding Program Parameters",
        "type": "object",
        "description": "The parameters for the `shieldingProgram` action.\n\nAction: Instruct people to isolate to reduce chance of catching contagion.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "vulnerablePeople": {
            "type": "boolean",
            "default": false,
            "description": "If true, clinically vulnerable people will be required to shield. If not given, defaults to false."
          },
          "ageThreshold": {
            "type": "integer",
            "description": "If given, people equal or over the threshold will be required to shield. If not given, or set to `null`, then age is ignored for shielding.",
            "format": "int32",
            "minimum": 0,
            "nullable": true
          }
        },
        "required": [
          "location"
        ]
      },
      "SimulationSettings": {
        "title": "Simulation Settings",
        "type": "object",
        "description": "The object containing the settings for the simulation.",
        "properties": {
          "turnLength": {
            "type": "object",
            "description": "An object stating how much in-simulation time will pass for each full turn.",
            "properties": {
              "unit": {
                "type": "string",
                "enum": [
                  "seconds",
                  "minutes",
                  "hours",
                  "days"
                ],
                "description": "The unit of time to measure in."
              },
              "count": {
                "type": "integer",
                "format": "int32",
                "minimum": 1,
                "description": "The amount of unit of time each turn consists of."
              }
            },
            "required": [
              "unit",
              "count"
            ]
          },
          "locations": {
            "type": "array",
            "minItems": 1,
            "description": "An array of all top-level locations that are available on the map.",
            "items": {
              "$ref": "#/components/schemas/LocationDefinition"
            }
          },
          "effectivenesses": {
            "type": "object",
            "required": [
              "masks",
              "vaccines",
              "tests"
            ],
            "description": "Provides the effectivenessess of various tools the WHO can use.",
            "properties": {
              "masks": {
                "$ref": "#/components/schemas/EffectivenessQuality"
              },
              "vaccines": {
                "type": "array",
                "description": "An array of effectiveness values, one for each vaccine.",
                "items": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 1,
                  "format": "float"
                }
              },
              "tests": {
                "$ref": "#/components/schemas/EffectivenessQuality"
              }
            }
          }
        },
        "required": [
          "locations",
          "effectivenesses"
        ]
      },
      "SimulationStatus": {
        "title": "Simulation Status",
        "type": "object",
        "properties": {
          "isWhoTurn": {
            "type": "boolean",
            "description": "Whether it is currently the turn of the WHO model."
          },
          "turnCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The amount of full turns (i.e. virus->who) that have completed. For the first full turn, this number is set to zero, and it should be incremented by 1 upon WHO turn end."
          },
          "budget": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The total budget the WHO has for the current turn. This can only be considered valid when `isWhoTurn` is `true`."
          }
        },
        "required": [
          "isWhoTurn",
          "turnCount",
          "budget"
        ],
        "description": "The object containing the status of the simulation."
      },
      "SimulationStatusUpdate": {
        "title": "Simulation Status Update",
        "type": "object",
        "description": "The body for the status update request.",
        "properties": {
          "isWhoTurn": {
            "type": "boolean",
            "description": "Required property to notify that the client has ended its turn. Has to be set to `false`, other values (and properties) are ignored, and do not perform any changes."
          }
        },
        "required": [
          "isWhoTurn"
        ]
      },
      "SocialDistancingMandateParameters": {
        "title": "Social Distancing Mandate Parameters",
        "type": "object",
        "description": "The parameters for the `socialDistancingMadate` action.\n\nAction: Introduce social distancing rules to reduce the spread caused by proximity to others in public places. Subject to disobedience.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "distance": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The distance in terms of the lowest-level grid size."
          }
        },
        "required": [
          "location"
        ]
      },
      "StayAtHomeParameters": {
        "title": "Stay At Home Parameters",
        "type": "object",
        "description": "The parameters for the `stayAtHome` action.\n\nAction: Begin a stay-at-home order for the given location that prevents people from leaving their residence except for necessary reasons (exercise/shopping/etc).",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ]
      },
      "TestAndIsolationParameters": {
        "title": "Test And Isolation Parameters",
        "type": "object",
        "description": "The parameters for the `testAndIsolation` action.\n\nAction: Starts a test-and-isolation program in an area using the given budget that will test symptomatic people or any person who requests, and any who return positive are automatically recommended to self-isolate.",
        "properties": {
          "testQuality": {
            "type": "integer",
            "description": "The quality level of the tests used. 0 is low-quality, 1 is high-quality.",
            "enum": [
              0,
              1
            ]
          },
          "quarantinePeriod": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The period of time a person is asked to self-isolate in day after receiving a positive result."
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The quantity of tests requested."
          },
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "symptomaticOnly": {
            "type": "boolean",
            "description": "Whether to test symptomatic people only."
          }
        },
        "required": [
          "testQuality",
          "quarantinePeriod",
          "quantity",
          "location",
          "symptomaticOnly"
        ]
      },
      "TestResults": {
        "title": "Test Results",
        "type": "object",
        "description": "Provides the test results collected by the test-and-isolation action for a location.",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The total number of tests performed."
          },
          "positive": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The number of positive test results."
          },
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "total",
          "positive",
          "location"
        ]
      }
    },
    "securitySchemes": {},
    "responses": {
      "Actions": {
        "description": "An array of action response objects.\n\nIf the endpoint returns a 425 status code (too early), then every action response will have the same error code and message, and no action will be applied. This status code is only returned if an action change is requested outside of the WHO's turn.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "description": "An array of action response object. Objects are in identical index order to the request array, and each object has the ID of the request it came from.",
              "items": {
                "$ref": "#/components/schemas/ActionResult"
              }
            }
          }
        }
      },
      "Actors": {
        "description": "An array of actors.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Actor"
              }
            }
          }
        }
      },
      "ActorSearchResult": {
        "description": "The resonse from a search endpoint. Provides an array of search result objects in the index order of the request array.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ActorSearchResult"
              }
            }
          }
        }
      },
      "FailedRequest": {
        "description": "If a request fails for any reason, either due to poor construction or server error, then this is the response that will be given. Unless stated otherwise, all 4xx and 5xx reponse codes from any endpoint should return this response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FailedRequest"
            }
          }
        }
      },
      "SimulationStatus": {
        "description": "The current simulation status from the server.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SimulationStatus"
            }
          }
        }
      },
      "SimulationSettings": {
        "description": "The current settings for the simulation. Once a simulation has started, this should never change.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SimulationSettings"
            }
          }
        }
      },
      "Totals": {
        "description": "An array of infection totals, each for a requested location.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InfectionTotals"
              }
            }
          }
        }
      },
      "TestResults": {
        "description": "An array of test results, each for a requested location.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestResults"
              }
            }
          }
        }
      }
    }
  }
}