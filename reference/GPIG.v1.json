{
  "openapi": "3.0.0",
  "info": {
    "title": "GPIG",
    "description": "GPIG API",
    "version": "1.0",
    "contact": {}
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Default Server"
    }
  ],
  "tags": [],
  "paths": {
    "/info/totals": {
      "post": {
        "tags": [],
        "summary": "Get state totals within a location",
        "operationId": "post-info-actors",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Totals"
          },
          "404": {
            "description": "Not Found"
          },
          "418": {
            "description": "I'm a teapot (RFC 2324)"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "location": {
                    "$ref": "#/components/schemas/LocationCoords"
                  }
                },
                "required": [
                  "location"
                ]
              },
              "examples": {
                "example": {
                  "value": {
                    "location": [
                      "A1",
                      "B3"
                    ]
                  }
                }
              }
            }
          }
        },
        "description": "Request for the total number of people in a grid location."
      },
      "parameters": []
    },
    "/info/actors": {
      "post": {
        "tags": [],
        "summary": "Get all Actor IDs in a location",
        "operationId": "post-info-actors-ids",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "actors": {
                      "type": "array",
                      "description": "An array of actor IDs.",
                      "items": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                      }
                    }
                  },
                  "required": [
                    "actors"
                  ]
                },
                "examples": {
                  "example": {
                    "value": {
                      "actors": [
                        1234,
                        5678
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "418": {
            "description": "I'm a teapot (RFC 2324)"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "location": {
                    "$ref": "#/components/schemas/LocationCoords"
                  }
                },
                "required": [
                  "location"
                ]
              },
              "examples": {
                "example": {
                  "value": {
                    "location": [
                      "A0"
                    ]
                  }
                }
              }
            }
          }
        },
        "description": "Request for the IDs of actors that are currently in a grid location (not including those in the dead state)."
      },
      "parameters": []
    },
    "/info/homes": {
      "post": {
        "tags": [],
        "summary": "Get actors who have home in location",
        "operationId": "post-info-actors-homes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "actors": {
                      "type": "array",
                      "description": "An array of actor IDs.",
                      "items": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                      }
                    }
                  },
                  "required": [
                    "actors"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "actors": [
                        5678,
                        1234,
                        5556
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "418": {
            "description": "I'm a teapot (RFC 2324)"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "location": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                      "$ref": "#/components/schemas/LocationCoords"
                    }
                  }
                },
                "required": [
                  "location"
                ]
              },
              "examples": {
                "example": {
                  "value": {
                    "location": []
                  }
                }
              }
            }
          }
        },
        "description": "Request for the IDs of actors who have homes in a grid location (including those in the dead state)."
      },
      "parameters": []
    },
    "/info/actors/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "The actor ID to request the state of"
        }
      ],
      "get": {
        "summary": "Get actor by ID",
        "operationId": "get-info-actor-id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Actor"
          }
        },
        "description": "Request for the current state of an actor."
      }
    },
    "/status": {
      "get": {
        "summary": "Get simulation status",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isWhoTurn": {
                      "type": "boolean",
                      "description": "Whether it is currently the turn of the WHO model."
                    },
                    "turnCount": {
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0,
                      "description": "The amount of full turns (i.e. virus->who) that have completed."
                    },
                    "budget": {
                      "type": "integer",
                      "format": "int32",
                      "minimum": 0,
                      "description": "The total budget the WHO has for the current turn. This can only be considered valid when `isWhoTurn` is `true`."
                    }
                  },
                  "required": [
                    "isWhoTurn",
                    "turnCount",
                    "budget"
                  ]
                },
                "examples": {
                  "example": {
                    "value": {
                      "health-org-turn": true,
                      "current-turn": 0,
                      "budget": 1000
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-status",
        "description": "Request for the current simulation status."
      },
      "parameters": []
    },
    "/settings": {
      "get": {
        "tags": [],
        "summary": "Get simulation settings",
        "operationId": "post-settings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "turnLength": {
                      "type": "object",
                      "properties": {
                        "unit": {
                          "type": "string",
                          "enum": [
                            "seconds",
                            "minutes",
                            "hours",
                            "days"
                          ],
                          "description": "The unit of time to measure in."
                        },
                        "count": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "description": "The amount of unit of time each turn consists of."
                        }
                      },
                      "required": [
                        "unit",
                        "count"
                      ]
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "unit": "seconds",
                      "count": 100
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Request the current game settings."
      },
      "parameters": []
    },
    "/actions": {
      "post": {
        "summary": "Adjust actions in batch",
        "operationId": "post-actions",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Actions"
          },
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "425": {
            "description": "Too Early"
          }
        },
        "description": "Allows the creation and deletion of actions in batch.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The actions you want to create or update",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ActionCreate"
                    },
                    {
                      "$ref": "#/components/schemas/ActionDelete"
                    }
                  ],
                  "description": "Any number of create/delete actions are allowed."
                }
              }
            }
          },
          "description": "The action(s) you want to create or update"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "InvestInVaccineParameters": {
        "title": "Invest In Vaccine Parameters",
        "type": "object",
        "description": "The parameters to the `investInVaccine` action.\n\nAction: Work towards producing a vaccine for the contagion. A vaccine is produced once US$80 million has been invested in the production of a vaccine, at this point further investment will lead to subsequent vaccines being produced via the same process. The produced vaccine will be as described in section 8 of the GPIG Cross-Team Competition Rules.",
        "properties": {
          "amountInvested": {
            "type": "integer",
            "description": "Amount invested for this turn."
          }
        },
        "required": [
          "amountInvested"
        ]
      },
      "FurloughParameters": {
        "title": "Furlough Parameters",
        "type": "object",
        "description": "The parameters to the `furlough` action.\n\nAction: Provide monetary support to those who are not able to work due to the contagion, propping up businesses that are not viable during the pandemic.\n\n- Reduces the number of people going to work\n- Higher amount results in higher budget cost\n- If used in combination with action 2 or 4, that action’s GDP cost is reduced\n",
        "properties": {
          "amountInvested": {
            "type": "integer",
            "description": "Amount invested per working person."
          },
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "amountInvested",
          "location"
        ]
      },
      "InformationPressReleaseParameters": {
        "title": "Information Press Release Parameters",
        "type": "object",
        "description": "The parameters to the `infoPressRelease` action.\n\nAction: Press-releases to improve morale/disseminate information, which could have a negative effect if it goes wrong and are produced every set unit of time.\n\n- Increase awareness\n- Probably increase public opinion\n- Implementation can change the amount this increases (minimum of 0 increase)\n- Implementation can alter how much the improvement is based on number of previous press releases",
        "properties": {
          "amountInvested": {
            "type": "integer",
            "description": "Amount invested in total."
          },
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "amountInvested",
          "location"
        ]
      },
      "LoanParameters": {
        "title": "Loan Parameters",
        "type": "object",
        "description": "The parameters to the `loan` action.\n\nAction: Allow the WHO to take additional Budget for situations in which they run out of money. Negative effects of taking a loan are considered too long term or otherwise out of scope\n\n- Reduction in Score\n- Increase in Budget for the following turn (Lump sum)\n",
        "properties": {
          "amountLoaned": {
            "type": "integer",
            "description": "Total amount to be loaned to the WHO."
          }
        },
        "required": [
          "amountLoaned"
        ]
      },
      "ActionCreate": {
        "title": "Action Create",
        "type": "object",
        "description": "The request object for creating an action.\n\nThe `action` parameter has to match the corresonding `parameters` object, no doing so is an error.",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": 0,
            "format": "int32",
            "description": "The ID of the created action. This can then be used for deletion later."
          },
          "action": {
            "type": "string",
            "enum": [
              "testAndIsolation",
              "stayAtHome",
              "closeSchools",
              "closeRecreationalLocations",
              "shieldingProgram",
              "movementRestrictions",
              "closeBorders",
              "investInVaccine",
              "furlough",
              "infoPressRelease",
              "loan",
              "maskMandate",
              "socialDistancingMandate",
              "curfew",
              "healthDrive",
              "investInHealthServices"
            ],
            "description": ""
          },
          "mode": {
            "type": "string",
            "enum": [
              "create"
            ]
          },
          "parameters": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TestAndIsolationParameters"
              },
              {
                "$ref": "#/components/schemas/StayAtHomeParameters"
              },
              {
                "$ref": "#/components/schemas/CloseSchoolsParameters"
              },
              {
                "$ref": "#/components/schemas/CloseRecreationalLocationsParameters"
              },
              {
                "$ref": "#/components/schemas/ShieldingProgramParameters"
              },
              {
                "$ref": "#/components/schemas/MovementRestrictionsParameters"
              },
              {
                "$ref": "#/components/schemas/CloseBordersParameters"
              },
              {
                "$ref": "#/components/schemas/InvestInVaccineParameters"
              },
              {
                "$ref": "#/components/schemas/FurloughParameters"
              },
              {
                "$ref": "#/components/schemas/InformationPressReleaseParameters"
              },
              {
                "$ref": "#/components/schemas/LoanParameters"
              },
              {
                "$ref": "#/components/schemas/MaskMandateParameters"
              },
              {
                "$ref": "#/components/schemas/HealthDriveParameters"
              },
              {
                "$ref": "#/components/schemas/InvestInHealthServicesParameters"
              },
              {
                "$ref": "#/components/schemas/SocialDistancingMandateParameters"
              },
              {
                "$ref": "#/components/schemas/CurfewParameters"
              }
            ],
            "description": "The parameters of the action. This object has to match with the corresponding action name."
          }
        },
        "required": [
          "id",
          "action",
          "mode",
          "parameters"
        ]
      },
      "TestAndIsolationParameters": {
        "title": "Test And Isolation Parameters",
        "type": "object",
        "description": "The parameters for the `testAndIsolation` action.\n\nAction: Starts a test-and-isolation program in an area using the given budget that will test symptomatic people or any person who requests, and any who return positive are automatically recommended to self-isolate.",
        "properties": {
          "testQuality": {
            "type": "integer",
            "description": "The quality level of the tests used. 0 is low-quality, 1 is high-quality.",
            "enum": [
              0,
              1
            ]
          },
          "quarantinePeriod": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The period of time a person is asked to self-isolate in day after receiving a positive result."
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The quantity of tests requested."
          },
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "symptomaticOnly": {
            "type": "boolean",
            "description": "Whether to test symptomatic people only."
          }
        },
        "required": [
          "testQuality",
          "quarantinePeriod",
          "quantity",
          "location",
          "symptomaticOnly"
        ]
      },
      "LocationCoords": {
        "title": "Location Coordinates",
        "type": "array",
        "description": "The coordinate array targeting a given location.\n\nCoordinates are a reference to a specific grid and sub-grid in increasing in specificity.",
        "items": {
          "type": "string",
          "pattern": "^[A-D][0-3]$"
        }
      },
      "StayAtHomeParameters": {
        "title": "Stay At Home Parameters",
        "type": "object",
        "description": "The parameters for the `stayAtHome` action.\n\nAction: Begin a stay-at-home order for the given location that prevents people from leaving their residence except for necessary reasons (exercise/shopping/etc).",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ]
      },
      "CloseSchoolsParameters": {
        "title": "Close Schools Parameters",
        "type": "object",
        "description": "The parameters for the `closeSchools` action.\n\nAction: Close all schools in the given location and prevent school-age people from mixing at school.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ]
      },
      "CloseRecreationalLocationsParameters": {
        "title": "Close Recreational Locations Parameters",
        "type": "object",
        "description": "The parameters for the `closeRecreationalLocations` action.\n\nAction: Close all recreational facilities in the given location and prevent mixing of people and households in these locations.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ]
      },
      "ActionDelete": {
        "title": "Action Delete",
        "type": "object",
        "description": "The request object for deleting an action.",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The ID of the action to delete."
          },
          "mode": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "mode"
        ]
      },
      "ShieldingProgramParameters": {
        "title": "Shielding Program Parameters",
        "type": "object",
        "description": "The parameters for the `shieldingProgram` action.\n\nAction: Instruct people to isolate to reduce chance of catching contagion.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "vulnerablePeople": {
            "type": "boolean",
            "default": false,
            "description": "If true, clinically vulnerable people will be required to shield. If not given, defaults to false."
          },
          "ageThreshold": {
            "type": "integer",
            "format": "int32",
            "description": "If given, people equal or over the threshold will be required to shield. If not given, or set to `null`, then age is ignored for shielding."
          }
        },
        "required": [
          "location"
        ]
      },
      "MovementRestrictionsParameters": {
        "title": "Movement Restrictions Parameters",
        "type": "object",
        "description": "The parameters for the `movementRestrictions` action.\n\nAction: Stop people from travelling a certain distance away from their household.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "distance": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The distance in terms of the lowest-level grid size."
          }
        },
        "required": [
          "location",
          "distance"
        ]
      },
      "CloseBordersParameters": {
        "title": "Close Borders Parameters",
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ],
        "description": "The parameters for the `closeBorders` action.\n\nAction: Stop all movement between one location and all others."
      },
      "MaskMandateParameters": {
        "title": "Mask Mandate Parameters",
        "type": "object",
        "description": "The parameters for the `maskMandate` action.\n\nAction: Require people to wear masks while in public to reduce the spread of the contagion.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "maskProvisionLevel": {
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1,
              2
            ],
            "description": "The level at which to provision masks for public use. 0 is no provisioning at all, 1 is low-quality mask provisioning, and 2 is high-quality mask provisioning."
          }
        },
        "required": [
          "location",
          "maskProvisionLevel"
        ]
      },
      "HealthDriveParameters": {
        "title": "Health Drive Parameters",
        "type": "object",
        "description": "The parameters for the `healthDrive` action.\n\nAction: Attempt to improve the health of people via things like exercise and healthy eating to try and improve the base well-being of the population.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ]
      },
      "InvestInHealthServicesParameters": {
        "title": "Invest In Health Services Parameters",
        "type": "object",
        "description": "The parameters for the `investInHealthServices` action.\n\nAction: Increase investment in health services. Improves health services response to contagion.",
        "properties": {
          "amountInvested": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "Amount invested in total. Higher amount will result in deminising returns."
          }
        },
        "required": [
          "amountInvested"
        ]
      },
      "SocialDistancingMandateParameters": {
        "title": "Social Distancing Mandate Parameters",
        "type": "object",
        "description": "The parameters for the `socialDistancingMadate` action.\n\nAction: Introduce social distancing rules to reduce the spread caused by proximity to others in public places. Subject to disobedience.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          },
          "distance": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "description": "The distance in terms of the lowest-level grid size."
          }
        },
        "required": [
          "location"
        ]
      },
      "CurfewParameters": {
        "title": "Curfew Parameters",
        "type": "object",
        "description": "The parameters for the `curfew` action.\n\nAction: Introduce a curfew to require the public to not go into public places past a certain time, reducing socialisation and use of recreational businesses.",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationCoords"
          }
        },
        "required": [
          "location"
        ]
      }
    },
    "securitySchemes": {},
    "responses": {
      "Actions": {
        "description": "Response for POST `/actions`",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "description": "The ID of the action that was adjusted. This will match the ID that was sent."
                  },
                  "code": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "description": "The response code for the action adjustment. This uses standard HTTP response codes. (e.g. 200 for success, 404 for an invalid location, etc.)"
                  },
                  "message": {
                    "type": "string",
                    "description": "A message containing information about the request reponse. Typically used for debug information in the case of non 2xx status codes."
                  }
                },
                "required": [
                  "id",
                  "code"
                ]
              }
            }
          }
        }
      },
      "Totals": {
        "description": "The response from GET `/info/totals`",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "uninfected": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "asymptomaticInfectedNotInfectious": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "asymptomaticInfectedInfectious": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "symptomatic": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "seriousInfection": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "dead": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "recoveredImmune": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                }
              },
              "required": [
                "uninfected",
                "asymptomaticInfectedNotInfectious",
                "asymptomaticInfectedInfectious",
                "symptomatic",
                "seriousInfection",
                "dead",
                "recoveredImmune"
              ]
            }
          }
        }
      },
      "Actor": {
        "description": "An actor.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "state": {
                  "type": "string",
                  "enum": [
                    "uninfected",
                    "asymptomaticInfectedNotInfectious",
                    "asymptomaticInfectedInfectious",
                    "symptomatic",
                    "seriousInfection",
                    "dead",
                    "recoveredImmune"
                  ],
                  "description": "The current infection state of the actor."
                },
                "location": {
                  "$ref": "#/components/schemas/LocationCoords"
                },
                "home": {
                  "$ref": "#/components/schemas/LocationCoords"
                },
                "age": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "description": "The age of the actor in years."
                },
                "vulnerable": {
                  "type": "boolean",
                  "description": "A flag for whether the actor is considered clinically vulnerable."
                },
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0,
                  "description": "The ID of the actor."
                }
              },
              "required": [
                "state",
                "location",
                "home",
                "age",
                "vulnerable",
                "id"
              ]
            }
          }
        }
      }
    }
  }
}
